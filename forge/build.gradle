plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "YouDied",
                "Specification-Vendor"    : "Gory_Moon",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Gory_Moon",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("forge-dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("forge")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

tasks.register('signJar') {
    dependsOn remapJar
    onlyIf {
        project.hasProperty('keyStore')
    }

    doLast {
        if (project.hasProperty('keyStore')) {
            new File("$buildDir/libs").mkdirs()
            project.logger.info("Signing jar ${remapJar.archiveFileName.get()}");

            def keyStore = project.findProperty('keyStore')
            def alias = project.findProperty('keyStoreAlias')
            def storePass = project.findProperty('keyStorePass')
            def keyPass = project.findProperty('keyStorePass')
            def inputFile = remapJar.archiveFile.get()

            def output = new File("$buildDir/jars")
            output.mkdirs()
            ant.signjar(
                    destDir: "${output.absolutePath}",
                    jar: inputFile,
                    alias: alias,
                    storetype: "jks",
                    keyStore: keyStore,
                    keypass: keyPass,
                    storepass: storePass,
                    verbose: true,
                    preservelastmodified: "true")
        } else {
            project.logger.log(LogLevel.WARN, "Could not sign ${remapJar.archiveFileName.get()}. No keyStore property could be found")
        }
    }
}

build.dependsOn signJar
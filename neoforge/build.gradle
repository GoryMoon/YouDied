plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude 'you_died.accesswidener'
    exclude 'architectury.common.json'
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

tasks.register('signJar') {
    dependsOn remapJar
    onlyIf {
        project.hasProperty('keyStore')
    }

    doLast {
        if (project.hasProperty('keyStore')) {
            def outputDir = layout.buildDirectory.get()
            new File("$outputDir/libs").mkdirs()
            logger.info("Signing jar ${remapJar.archiveFileName.get()}")

            def keyStore = findProperty('keyStore')
            def alias = project.findProperty('keyStoreAlias')
            def storePass = project.findProperty('keyStorePass')
            def keyPass = project.findProperty('keyStorePass')
            def inputFile = remapJar.archiveFile.get()

            def output = new File("$outputDir/jars")
            output.mkdirs()

            ant.signjar(
                    destDir: "${output.absolutePath}",
                    jar: inputFile,
                    alias: alias,
                    storetype: "jks",
                    keyStore: keyStore,
                    keypass: keyPass,
                    storepass: storePass,
                    verbose: true,
                    preservelastmodified: "true")
        } else {
            logger.log(LogLevel.WARN, "Could not sign ${remapJar.archiveFileName.get()}. No keyStore property could be found")
        }
    }
}

build.dependsOn signJar
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}"
    // Remove the next few lines if you don't want to depend on the API
    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") {
        // We must not pull Fabric Loader from Architectury Fabric
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
    inputs.property "group", rootProject.maven_group
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "group": rootProject.maven_group,
                "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "quilt-dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "quilt"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}


task signJar(dependsOn: remapJar, group: 'build') {
    dependsOn remapJar
    onlyIf {
        project.hasProperty('keyStore')
    }

    doLast {
        if (project.hasProperty('keyStore')) {
            new File("$buildDir/libs").mkdirs()
            project.logger.info("Signing jar ${remapJar.archiveFileName.get()}");

            def keyStore = project.findProperty('keyStore')
            def alias = project.findProperty('keyStoreAlias')
            def storePass = project.findProperty('keyStorePass')
            def keyPass = project.findProperty('keyStorePass')
            def inputFile = remapJar.archiveFile.get()

            def output = new File("$buildDir/jars")
            output.mkdirs()
            ant.signjar(
                    destDir: "${output.absolutePath}",
                    jar: inputFile,
                    alias: alias,
                    storetype: "jks",
                    keyStore: keyStore,
                    keypass: keyPass,
                    storepass: storePass,
                    verbose: true,
                    preservelastmodified: "true")
        } else {
            project.logger.log(LogLevel.WARN, "Could not sign ${remapJar.archiveFileName.get()}. No keyStore property could be found")
        }
    }
}

build.dependsOn signJar